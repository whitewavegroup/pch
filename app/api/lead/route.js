import { NextResponse } from 'next/server';
function escapeHtml(str){return str.replace(/[&<>"']/g, s=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[s]));}
export async function POST(req){try{const form=await req.formData(); const data={}; for(const [k,v] of form.entries()){ if(k in data){ if(Array.isArray(data[k])) data[k].push(v); else data[k]=[data[k],v]; } else { data[k]=v; }} console.log('[PCH] Lead submission:', data); let emailed=false; if(process.env.RESEND_API_KEY&&process.env.TO_EMAIL&&process.env.FROM_EMAIL){try{ const { Resend } = await import('resend'); const resend=new Resend(process.env.RESEND_API_KEY); const subject=`PCH Lead: ${data.form_role||'n/a'} â€” ${data.contact_name||'Unknown'}`; const html=`<h2>New ProConnectHub Lead</h2><pre style=\"font-family: ui-monospace, SFMono-Regular, Menlo, monospace; white-space: pre-wrap;\">${escapeHtml(JSON.stringify(data,null,2))}</pre>`; const res=await resend.emails.send({from:process.env.FROM_EMAIL,to:process.env.TO_EMAIL,subject,html}); if(!res.error) emailed=true; }catch(e){console.error('[PCH] Email error:', e);} } return NextResponse.json({ok:true,emailed}); }catch(e){console.error('[PCH] Lead error:', e); return NextResponse.json({ok:false,error:'Invalid submission'},{status:400}); }}
